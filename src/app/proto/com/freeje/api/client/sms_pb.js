/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.freeje.api.client.SmsMessage', null, global);
goog.exportSymbol('proto.com.freeje.api.client.SmsMessage.Status', null, global);
goog.exportSymbol('proto.com.freeje.api.client.SmsMessage.Type', null, global);
goog.exportSymbol('proto.com.freeje.api.client.SmsPull', null, global);
goog.exportSymbol('proto.com.freeje.api.client.SmsPullId', null, global);
goog.exportSymbol('proto.com.freeje.api.client.SmsPullPeriod', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.SmsPullPeriod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.SmsPullPeriod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.SmsPullPeriod.displayName = 'proto.com.freeje.api.client.SmsPullPeriod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.SmsPullId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.SmsPullId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.SmsPullId.displayName = 'proto.com.freeje.api.client.SmsPullId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.SmsPull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.freeje.api.client.SmsPull.oneofGroups_);
};
goog.inherits(proto.com.freeje.api.client.SmsPull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.SmsPull.displayName = 'proto.com.freeje.api.client.SmsPull';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.SmsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.SmsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.SmsMessage.displayName = 'proto.com.freeje.api.client.SmsMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.SmsPullPeriod.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.SmsPullPeriod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.SmsPullPeriod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsPullPeriod.toObject = function(includeInstance, msg) {
  var obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.SmsPullPeriod}
 */
proto.com.freeje.api.client.SmsPullPeriod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.SmsPullPeriod;
  return proto.com.freeje.api.client.SmsPullPeriod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.SmsPullPeriod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.SmsPullPeriod}
 */
proto.com.freeje.api.client.SmsPullPeriod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.SmsPullPeriod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.SmsPullPeriod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.SmsPullPeriod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsPullPeriod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 from = 1;
 * @return {number}
 */
proto.com.freeje.api.client.SmsPullPeriod.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsPullPeriod.prototype.setFrom = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 duration = 2;
 * @return {number}
 */
proto.com.freeje.api.client.SmsPullPeriod.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsPullPeriod.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.SmsPullId.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.SmsPullId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.SmsPullId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsPullId.toObject = function(includeInstance, msg) {
  var obj = {
    lastKnownId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    continuous: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.SmsPullId}
 */
proto.com.freeje.api.client.SmsPullId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.SmsPullId;
  return proto.com.freeje.api.client.SmsPullId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.SmsPullId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.SmsPullId}
 */
proto.com.freeje.api.client.SmsPullId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastKnownId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinuous(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.SmsPullId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.SmsPullId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.SmsPullId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsPullId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastKnownId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getContinuous();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 last_known_id = 1;
 * @return {number}
 */
proto.com.freeje.api.client.SmsPullId.prototype.getLastKnownId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsPullId.prototype.setLastKnownId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool continuous = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.freeje.api.client.SmsPullId.prototype.getContinuous = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.com.freeje.api.client.SmsPullId.prototype.setContinuous = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.freeje.api.client.SmsPull.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.com.freeje.api.client.SmsPull.ModeCase = {
  MODE_NOT_SET: 0,
  FROM_ID: 1,
  FROM_PERIOD: 2
};

/**
 * @return {proto.com.freeje.api.client.SmsPull.ModeCase}
 */
proto.com.freeje.api.client.SmsPull.prototype.getModeCase = function() {
  return /** @type {proto.com.freeje.api.client.SmsPull.ModeCase} */(jspb.Message.computeOneofCase(this, proto.com.freeje.api.client.SmsPull.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.SmsPull.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.SmsPull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.SmsPull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsPull.toObject = function(includeInstance, msg) {
  var obj = {
    fromId: (f = msg.getFromId()) && proto.com.freeje.api.client.SmsPullId.toObject(includeInstance, f),
    fromPeriod: (f = msg.getFromPeriod()) && proto.com.freeje.api.client.SmsPullPeriod.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.SmsPull}
 */
proto.com.freeje.api.client.SmsPull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.SmsPull;
  return proto.com.freeje.api.client.SmsPull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.SmsPull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.SmsPull}
 */
proto.com.freeje.api.client.SmsPull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.freeje.api.client.SmsPullId;
      reader.readMessage(value,proto.com.freeje.api.client.SmsPullId.deserializeBinaryFromReader);
      msg.setFromId(value);
      break;
    case 2:
      var value = new proto.com.freeje.api.client.SmsPullPeriod;
      reader.readMessage(value,proto.com.freeje.api.client.SmsPullPeriod.deserializeBinaryFromReader);
      msg.setFromPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.SmsPull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.SmsPull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.SmsPull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsPull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.freeje.api.client.SmsPullId.serializeBinaryToWriter
    );
  }
  f = message.getFromPeriod();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.freeje.api.client.SmsPullPeriod.serializeBinaryToWriter
    );
  }
};


/**
 * optional SmsPullId from_id = 1;
 * @return {?proto.com.freeje.api.client.SmsPullId}
 */
proto.com.freeje.api.client.SmsPull.prototype.getFromId = function() {
  return /** @type{?proto.com.freeje.api.client.SmsPullId} */ (
    jspb.Message.getWrapperField(this, proto.com.freeje.api.client.SmsPullId, 1));
};


/** @param {?proto.com.freeje.api.client.SmsPullId|undefined} value */
proto.com.freeje.api.client.SmsPull.prototype.setFromId = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.com.freeje.api.client.SmsPull.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.freeje.api.client.SmsPull.prototype.clearFromId = function() {
  this.setFromId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.freeje.api.client.SmsPull.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SmsPullPeriod from_period = 2;
 * @return {?proto.com.freeje.api.client.SmsPullPeriod}
 */
proto.com.freeje.api.client.SmsPull.prototype.getFromPeriod = function() {
  return /** @type{?proto.com.freeje.api.client.SmsPullPeriod} */ (
    jspb.Message.getWrapperField(this, proto.com.freeje.api.client.SmsPullPeriod, 2));
};


/** @param {?proto.com.freeje.api.client.SmsPullPeriod|undefined} value */
proto.com.freeje.api.client.SmsPull.prototype.setFromPeriod = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.com.freeje.api.client.SmsPull.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.freeje.api.client.SmsPull.prototype.clearFromPeriod = function() {
  this.setFromPeriod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.freeje.api.client.SmsPull.prototype.hasFromPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.SmsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.SmsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.SmsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsMessage.toObject = function(includeInstance, msg) {
  var obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    src: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dst: jspb.Message.getFieldWithDefault(msg, 4, ""),
    text: jspb.Message.getFieldWithDefault(msg, 5, ""),
    stamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    parts: jspb.Message.getFieldWithDefault(msg, 8, 0),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.SmsMessage}
 */
proto.com.freeje.api.client.SmsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.SmsMessage;
  return proto.com.freeje.api.client.SmsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.SmsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.SmsMessage}
 */
proto.com.freeje.api.client.SmsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDst(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParts(value);
      break;
    case 9:
      var value = /** @type {!proto.com.freeje.api.client.SmsMessage.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {!proto.com.freeje.api.client.SmsMessage.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.SmsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.SmsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.SmsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SmsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDst();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getParts();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.com.freeje.api.client.SmsMessage.Type = {
  INBOUND: 0,
  OUTBOUND: 1
};

/**
 * @enum {number}
 */
proto.com.freeje.api.client.SmsMessage.Status = {
  PENDING: 0,
  DELIVERED: 1
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SmsMessage.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string src = 3;
 * @return {string}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SmsMessage.prototype.setSrc = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dst = 4;
 * @return {string}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SmsMessage.prototype.setDst = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string text = 5;
 * @return {string}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SmsMessage.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 stamp = 6;
 * @return {number}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getStamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsMessage.prototype.setStamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float price = 7;
 * @return {number}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsMessage.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 parts = 8;
 * @return {number}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getParts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.SmsMessage.prototype.setParts = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Type type = 9;
 * @return {!proto.com.freeje.api.client.SmsMessage.Type}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getType = function() {
  return /** @type {!proto.com.freeje.api.client.SmsMessage.Type} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.com.freeje.api.client.SmsMessage.Type} value */
proto.com.freeje.api.client.SmsMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional Status status = 10;
 * @return {!proto.com.freeje.api.client.SmsMessage.Status}
 */
proto.com.freeje.api.client.SmsMessage.prototype.getStatus = function() {
  return /** @type {!proto.com.freeje.api.client.SmsMessage.Status} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.com.freeje.api.client.SmsMessage.Status} value */
proto.com.freeje.api.client.SmsMessage.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


goog.object.extend(exports, proto.com.freeje.api.client);
