/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.freeje.api.client.Invoice', null, global);
goog.exportSymbol('proto.com.freeje.api.client.Method', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.Method = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.Method, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.Method.displayName = 'proto.com.freeje.api.client.Method';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.Invoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.Invoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.Invoice.displayName = 'proto.com.freeje.api.client.Invoice';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.Method.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.Method.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.Method} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.Method.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    request: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    finalAmount: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    rate: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.Method}
 */
proto.com.freeje.api.client.Method.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.Method;
  return proto.com.freeje.api.client.Method.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.Method} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.Method}
 */
proto.com.freeje.api.client.Method.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFinalAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.Method.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.Method.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.Method} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.Method.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getFinalAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRate();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.freeje.api.client.Method.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Method.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.com.freeje.api.client.Method.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Method.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string request = 3;
 * @return {string}
 */
proto.com.freeje.api.client.Method.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Method.prototype.setRequest = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double amount = 4;
 * @return {number}
 */
proto.com.freeje.api.client.Method.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.Method.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double final_amount = 5;
 * @return {number}
 */
proto.com.freeje.api.client.Method.prototype.getFinalAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.Method.prototype.setFinalAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.com.freeje.api.client.Method.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Method.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.com.freeje.api.client.Method.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Method.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional double rate = 8;
 * @return {number}
 */
proto.com.freeje.api.client.Method.prototype.getRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.Method.prototype.setRate = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.Invoice.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.Invoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.Invoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.Invoice.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    request: jspb.Message.getFieldWithDefault(msg, 3, ""),
    product: jspb.Message.getFieldWithDefault(msg, 4, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    finalAmount: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 7, ""),
    actionUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    actionMethod: jspb.Message.getFieldWithDefault(msg, 9, ""),
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : [],
    rate: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    successUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    failUrl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    name: jspb.Message.getFieldWithDefault(msg, 14, ""),
    url: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.Invoice}
 */
proto.com.freeje.api.client.Invoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.Invoice;
  return proto.com.freeje.api.client.Invoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.Invoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.Invoice}
 */
proto.com.freeje.api.client.Invoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduct(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFinalAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionMethod(value);
      break;
    case 10:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuccessUrl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setFailUrl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.Invoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.Invoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.Invoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.Invoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProduct();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getFinalAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getActionUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getActionMethod();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRate();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getSuccessUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFailUrl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pay_id = 2;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getPayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setPayId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string request = 3;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setRequest = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string product = 4;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getProduct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setProduct = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double amount = 5;
 * @return {number}
 */
proto.com.freeje.api.client.Invoice.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.Invoice.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double final_amount = 6;
 * @return {number}
 */
proto.com.freeje.api.client.Invoice.prototype.getFinalAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.Invoice.prototype.setFinalAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string currency = 7;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string action_url = 8;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getActionUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setActionUrl = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string action_method = 9;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getActionMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setActionMethod = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * map<string, string> parameters = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.com.freeje.api.client.Invoice.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.com.freeje.api.client.Invoice.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};


/**
 * optional double rate = 11;
 * @return {number}
 */
proto.com.freeje.api.client.Invoice.prototype.getRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.Invoice.prototype.setRate = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional string success_url = 12;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getSuccessUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setSuccessUrl = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string fail_url = 13;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getFailUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setFailUrl = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string name = 14;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string url = 15;
 * @return {string}
 */
proto.com.freeje.api.client.Invoice.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.Invoice.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


goog.object.extend(exports, proto.com.freeje.api.client);
