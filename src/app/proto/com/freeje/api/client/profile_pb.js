/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var com_freeje_common_pb = require('../../../../com/freeje/common_pb.js');
goog.object.extend(proto, com_freeje_common_pb);
var com_freeje_api_client_did_pb = require('../../../../com/freeje/api/client/did_pb.js');
goog.object.extend(proto, com_freeje_api_client_did_pb);
goog.exportSymbol('proto.com.freeje.api.client.AccessCredentials', null, global);
goog.exportSymbol('proto.com.freeje.api.client.AccountProfile', null, global);
goog.exportSymbol('proto.com.freeje.api.client.ApiAccess', null, global);
goog.exportSymbol('proto.com.freeje.api.client.PhoneToken', null, global);
goog.exportSymbol('proto.com.freeje.api.client.ProfileDocument', null, global);
goog.exportSymbol('proto.com.freeje.api.client.ProvisionMessage', null, global);
goog.exportSymbol('proto.com.freeje.api.client.SipAccess', null, global);
goog.exportSymbol('proto.com.freeje.api.client.WebAccess', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.SipAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.SipAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.SipAccess.displayName = 'proto.com.freeje.api.client.SipAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.WebAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.WebAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.WebAccess.displayName = 'proto.com.freeje.api.client.WebAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.ApiAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.ApiAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.ApiAccess.displayName = 'proto.com.freeje.api.client.ApiAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.AccessCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.freeje.api.client.AccessCredentials.repeatedFields_, proto.com.freeje.api.client.AccessCredentials.oneofGroups_);
};
goog.inherits(proto.com.freeje.api.client.AccessCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.AccessCredentials.displayName = 'proto.com.freeje.api.client.AccessCredentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.AccountProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.AccountProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.AccountProfile.displayName = 'proto.com.freeje.api.client.AccountProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.ProfileDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.ProfileDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.ProfileDocument.displayName = 'proto.com.freeje.api.client.ProfileDocument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.ProvisionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.freeje.api.client.ProvisionMessage.repeatedFields_, null);
};
goog.inherits(proto.com.freeje.api.client.ProvisionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.ProvisionMessage.displayName = 'proto.com.freeje.api.client.ProvisionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.freeje.api.client.PhoneToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.freeje.api.client.PhoneToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.freeje.api.client.PhoneToken.displayName = 'proto.com.freeje.api.client.PhoneToken';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.SipAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.SipAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.SipAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SipAccess.toObject = function(includeInstance, msg) {
  var obj = {
    sipUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    login: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.SipAccess}
 */
proto.com.freeje.api.client.SipAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.SipAccess;
  return proto.com.freeje.api.client.SipAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.SipAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.SipAccess}
 */
proto.com.freeje.api.client.SipAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSipUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.SipAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.SipAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.SipAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.SipAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSipUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string sip_uri = 1;
 * @return {string}
 */
proto.com.freeje.api.client.SipAccess.prototype.getSipUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SipAccess.prototype.setSipUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string login = 2;
 * @return {string}
 */
proto.com.freeje.api.client.SipAccess.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SipAccess.prototype.setLogin = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.com.freeje.api.client.SipAccess.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.SipAccess.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.WebAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.WebAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.WebAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.WebAccess.toObject = function(includeInstance, msg) {
  var obj = {
    wssUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    login: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.WebAccess}
 */
proto.com.freeje.api.client.WebAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.WebAccess;
  return proto.com.freeje.api.client.WebAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.WebAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.WebAccess}
 */
proto.com.freeje.api.client.WebAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWssUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.WebAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.WebAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.WebAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.WebAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWssUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string wss_uri = 1;
 * @return {string}
 */
proto.com.freeje.api.client.WebAccess.prototype.getWssUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.WebAccess.prototype.setWssUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string login = 2;
 * @return {string}
 */
proto.com.freeje.api.client.WebAccess.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.WebAccess.prototype.setLogin = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.com.freeje.api.client.WebAccess.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.WebAccess.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.ApiAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.ApiAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.ApiAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.ApiAccess.toObject = function(includeInstance, msg) {
  var obj = {
    apiUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.ApiAccess}
 */
proto.com.freeje.api.client.ApiAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.ApiAccess;
  return proto.com.freeje.api.client.ApiAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.ApiAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.ApiAccess}
 */
proto.com.freeje.api.client.ApiAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.ApiAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.ApiAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.ApiAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.ApiAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string api_uri = 1;
 * @return {string}
 */
proto.com.freeje.api.client.ApiAccess.prototype.getApiUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.ApiAccess.prototype.setApiUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.com.freeje.api.client.ApiAccess.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.ApiAccess.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.freeje.api.client.AccessCredentials.repeatedFields_ = [104];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.freeje.api.client.AccessCredentials.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.com.freeje.api.client.AccessCredentials.TypeCase = {
  TYPE_NOT_SET: 0,
  SIP: 2,
  WEB: 3,
  API: 4
};

/**
 * @return {proto.com.freeje.api.client.AccessCredentials.TypeCase}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getTypeCase = function() {
  return /** @type {proto.com.freeje.api.client.AccessCredentials.TypeCase} */(jspb.Message.computeOneofCase(this, proto.com.freeje.api.client.AccessCredentials.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.AccessCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.AccessCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.AccessCredentials.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sip: (f = msg.getSip()) && proto.com.freeje.api.client.SipAccess.toObject(includeInstance, f),
    web: (f = msg.getWeb()) && proto.com.freeje.api.client.WebAccess.toObject(includeInstance, f),
    api: (f = msg.getApi()) && proto.com.freeje.api.client.ApiAccess.toObject(includeInstance, f),
    createdms: jspb.Message.getFieldWithDefault(msg, 100, 0),
    lastusagems: jspb.Message.getFieldWithDefault(msg, 101, 0),
    validms: jspb.Message.getFieldWithDefault(msg, 102, 0),
    temp: jspb.Message.getFieldWithDefault(msg, 103, false),
    ipListList: jspb.Message.getRepeatedField(msg, 104)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.AccessCredentials}
 */
proto.com.freeje.api.client.AccessCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.AccessCredentials;
  return proto.com.freeje.api.client.AccessCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.AccessCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.AccessCredentials}
 */
proto.com.freeje.api.client.AccessCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.com.freeje.api.client.SipAccess;
      reader.readMessage(value,proto.com.freeje.api.client.SipAccess.deserializeBinaryFromReader);
      msg.setSip(value);
      break;
    case 3:
      var value = new proto.com.freeje.api.client.WebAccess;
      reader.readMessage(value,proto.com.freeje.api.client.WebAccess.deserializeBinaryFromReader);
      msg.setWeb(value);
      break;
    case 4:
      var value = new proto.com.freeje.api.client.ApiAccess;
      reader.readMessage(value,proto.com.freeje.api.client.ApiAccess.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    case 100:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedms(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastusagems(value);
      break;
    case 102:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidms(value);
      break;
    case 103:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTemp(value);
      break;
    case 104:
      var value = /** @type {string} */ (reader.readString());
      msg.addIpList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.AccessCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.AccessCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.AccessCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSip();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.freeje.api.client.SipAccess.serializeBinaryToWriter
    );
  }
  f = message.getWeb();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.freeje.api.client.WebAccess.serializeBinaryToWriter
    );
  }
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.freeje.api.client.ApiAccess.serializeBinaryToWriter
    );
  }
  f = message.getCreatedms();
  if (f !== 0) {
    writer.writeInt64(
      100,
      f
    );
  }
  f = message.getLastusagems();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getValidms();
  if (f !== 0) {
    writer.writeInt64(
      102,
      f
    );
  }
  f = message.getTemp();
  if (f) {
    writer.writeBool(
      103,
      f
    );
  }
  f = message.getIpListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      104,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SipAccess sip = 2;
 * @return {?proto.com.freeje.api.client.SipAccess}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getSip = function() {
  return /** @type{?proto.com.freeje.api.client.SipAccess} */ (
    jspb.Message.getWrapperField(this, proto.com.freeje.api.client.SipAccess, 2));
};


/** @param {?proto.com.freeje.api.client.SipAccess|undefined} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setSip = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.com.freeje.api.client.AccessCredentials.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.freeje.api.client.AccessCredentials.prototype.clearSip = function() {
  this.setSip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.hasSip = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebAccess web = 3;
 * @return {?proto.com.freeje.api.client.WebAccess}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getWeb = function() {
  return /** @type{?proto.com.freeje.api.client.WebAccess} */ (
    jspb.Message.getWrapperField(this, proto.com.freeje.api.client.WebAccess, 3));
};


/** @param {?proto.com.freeje.api.client.WebAccess|undefined} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setWeb = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.com.freeje.api.client.AccessCredentials.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.freeje.api.client.AccessCredentials.prototype.clearWeb = function() {
  this.setWeb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.hasWeb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ApiAccess api = 4;
 * @return {?proto.com.freeje.api.client.ApiAccess}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getApi = function() {
  return /** @type{?proto.com.freeje.api.client.ApiAccess} */ (
    jspb.Message.getWrapperField(this, proto.com.freeje.api.client.ApiAccess, 4));
};


/** @param {?proto.com.freeje.api.client.ApiAccess|undefined} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setApi = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.com.freeje.api.client.AccessCredentials.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.freeje.api.client.AccessCredentials.prototype.clearApi = function() {
  this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.hasApi = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 createdms = 100;
 * @return {number}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getCreatedms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setCreatedms = function(value) {
  jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 lastusagems = 101;
 * @return {number}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getLastusagems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setLastusagems = function(value) {
  jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 validms = 102;
 * @return {number}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getValidms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 102, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setValidms = function(value) {
  jspb.Message.setProto3IntField(this, 102, value);
};


/**
 * optional bool temp = 103;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getTemp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 103, false));
};


/** @param {boolean} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setTemp = function(value) {
  jspb.Message.setProto3BooleanField(this, 103, value);
};


/**
 * repeated string ip_list = 104;
 * @return {!Array<string>}
 */
proto.com.freeje.api.client.AccessCredentials.prototype.getIpListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 104));
};


/** @param {!Array<string>} value */
proto.com.freeje.api.client.AccessCredentials.prototype.setIpListList = function(value) {
  jspb.Message.setField(this, 104, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.com.freeje.api.client.AccessCredentials.prototype.addIpList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 104, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.freeje.api.client.AccessCredentials.prototype.clearIpListList = function() {
  this.setIpListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.AccountProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.AccountProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.AccountProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.AccountProfile.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    photo: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    funds: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    tariffid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tariffname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    agreement: (f = msg.getAgreement()) && com_freeje_common_pb.AccountAgreement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.AccountProfile}
 */
proto.com.freeje.api.client.AccountProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.AccountProfile;
  return proto.com.freeje.api.client.AccountProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.AccountProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.AccountProfile}
 */
proto.com.freeje.api.client.AccountProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFunds(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTariffid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTariffname(value);
      break;
    case 8:
      var value = new com_freeje_common_pb.AccountAgreement;
      reader.readMessage(value,com_freeje_common_pb.AccountAgreement.deserializeBinaryFromReader);
      msg.setAgreement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.AccountProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.AccountProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.AccountProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.AccountProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhoto();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFunds();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getTariffid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTariffname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAgreement();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      com_freeje_common_pb.AccountAgreement.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccountProfile.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccountProfile.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string photo = 3;
 * @return {string}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getPhoto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccountProfile.prototype.setPhoto = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccountProfile.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double funds = 5;
 * @return {number}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getFunds = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.freeje.api.client.AccountProfile.prototype.setFunds = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string tariffId = 6;
 * @return {string}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getTariffid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccountProfile.prototype.setTariffid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string tariffName = 7;
 * @return {string}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getTariffname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.AccountProfile.prototype.setTariffname = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional com.freeje.AccountAgreement agreement = 8;
 * @return {?proto.com.freeje.AccountAgreement}
 */
proto.com.freeje.api.client.AccountProfile.prototype.getAgreement = function() {
  return /** @type{?proto.com.freeje.AccountAgreement} */ (
    jspb.Message.getWrapperField(this, com_freeje_common_pb.AccountAgreement, 8));
};


/** @param {?proto.com.freeje.AccountAgreement|undefined} value */
proto.com.freeje.api.client.AccountProfile.prototype.setAgreement = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.com.freeje.api.client.AccountProfile.prototype.clearAgreement = function() {
  this.setAgreement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.freeje.api.client.AccountProfile.prototype.hasAgreement = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.ProfileDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.ProfileDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.ProfileDocument.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedms: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.ProfileDocument}
 */
proto.com.freeje.api.client.ProfileDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.ProfileDocument;
  return proto.com.freeje.api.client.ProfileDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.ProfileDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.ProfileDocument}
 */
proto.com.freeje.api.client.ProfileDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedms(value);
      break;
    case 4:
      var value = /** @type {!proto.com.freeje.DocumentType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.ProfileDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.ProfileDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.ProfileDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedms();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.ProfileDocument.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.ProfileDocument.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 updatedms = 3;
 * @return {number}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getUpdatedms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.ProfileDocument.prototype.setUpdatedms = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional com.freeje.DocumentType type = 4;
 * @return {!proto.com.freeje.DocumentType}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getType = function() {
  return /** @type {!proto.com.freeje.DocumentType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.com.freeje.DocumentType} value */
proto.com.freeje.api.client.ProfileDocument.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.ProfileDocument.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.com.freeje.api.client.ProfileDocument.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.freeje.api.client.ProvisionMessage.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.ProvisionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.ProvisionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.ProvisionMessage.toObject = function(includeInstance, msg) {
  var obj = {
    stamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phonesList: jspb.Message.toObjectList(msg.getPhonesList(),
    com_freeje_common_pb.PhoneNumber.toObject, includeInstance),
    didsList: jspb.Message.toObjectList(msg.getDidsList(),
    com_freeje_api_client_did_pb.DidNumber.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.ProvisionMessage}
 */
proto.com.freeje.api.client.ProvisionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.ProvisionMessage;
  return proto.com.freeje.api.client.ProvisionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.ProvisionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.ProvisionMessage}
 */
proto.com.freeje.api.client.ProvisionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStamp(value);
      break;
    case 2:
      var value = new com_freeje_common_pb.PhoneNumber;
      reader.readMessage(value,com_freeje_common_pb.PhoneNumber.deserializeBinaryFromReader);
      msg.addPhones(value);
      break;
    case 3:
      var value = new com_freeje_api_client_did_pb.DidNumber;
      reader.readMessage(value,com_freeje_api_client_did_pb.DidNumber.deserializeBinaryFromReader);
      msg.addDids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.ProvisionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.ProvisionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.ProvisionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPhonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      com_freeje_common_pb.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getDidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      com_freeje_api_client_did_pb.DidNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 stamp = 1;
 * @return {number}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.getStamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.freeje.api.client.ProvisionMessage.prototype.setStamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated com.freeje.PhoneNumber phones = 2;
 * @return {!Array<!proto.com.freeje.PhoneNumber>}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.getPhonesList = function() {
  return /** @type{!Array<!proto.com.freeje.PhoneNumber>} */ (
    jspb.Message.getRepeatedWrapperField(this, com_freeje_common_pb.PhoneNumber, 2));
};


/** @param {!Array<!proto.com.freeje.PhoneNumber>} value */
proto.com.freeje.api.client.ProvisionMessage.prototype.setPhonesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.com.freeje.PhoneNumber=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.freeje.PhoneNumber}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.addPhones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.freeje.PhoneNumber, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.clearPhonesList = function() {
  this.setPhonesList([]);
};


/**
 * repeated DidNumber dids = 3;
 * @return {!Array<!proto.com.freeje.api.client.DidNumber>}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.getDidsList = function() {
  return /** @type{!Array<!proto.com.freeje.api.client.DidNumber>} */ (
    jspb.Message.getRepeatedWrapperField(this, com_freeje_api_client_did_pb.DidNumber, 3));
};


/** @param {!Array<!proto.com.freeje.api.client.DidNumber>} value */
proto.com.freeje.api.client.ProvisionMessage.prototype.setDidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.com.freeje.api.client.DidNumber=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.freeje.api.client.DidNumber}
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.addDids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.freeje.api.client.DidNumber, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.com.freeje.api.client.ProvisionMessage.prototype.clearDidsList = function() {
  this.setDidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.freeje.api.client.PhoneToken.prototype.toObject = function(opt_includeInstance) {
  return proto.com.freeje.api.client.PhoneToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.freeje.api.client.PhoneToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.PhoneToken.toObject = function(includeInstance, msg) {
  var obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.freeje.api.client.PhoneToken}
 */
proto.com.freeje.api.client.PhoneToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.freeje.api.client.PhoneToken;
  return proto.com.freeje.api.client.PhoneToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.freeje.api.client.PhoneToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.freeje.api.client.PhoneToken}
 */
proto.com.freeje.api.client.PhoneToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.freeje.api.client.PhoneToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.freeje.api.client.PhoneToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.freeje.api.client.PhoneToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.freeje.api.client.PhoneToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.com.freeje.api.client.PhoneToken.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.freeje.api.client.PhoneToken.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.com.freeje.api.client);
